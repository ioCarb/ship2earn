from "ecc/babyjubjubParams" import BabyJubJubParams;
import "signatures/verifyEddsa.zok" as verifyEddsa;
import "ecc/babyjubjubParams.zok" as context;


def main(field[2] R, field S, field[2] A, u32[8] M0, u32[8] M1,field[300] temp, field[300] hum,field[300] speed,field[300] acceleration,bool[300] hasmoved) -> field {
    BabyJubJubParams context = context();
	assert(verifyEddsa(R, S, A, M0, M1, context));
    log("signature {} is verified",S);
    u32 mut score = 0;
    field mut sum_temp = 0;
    field mut sum_hum = 0;
    field mut sum_pause = 0;
    field mut sum_speed_moving = 0;
    bool mut is_speed = true;
    bool mut is_acc = true;
    for u32 i in 0..300 {
       sum_temp = sum_temp + temp[i];
       sum_hum = sum_hum + hum[i];

       sum_speed_moving = if hasmoved[i] {sum_speed_moving + speed[i]} else {sum_speed_moving};
       is_speed = if speed <= 130 {is_speed} else {false};
       is_acc =  if acceleration <=2 && acceleration >= -2 {is_acc} else {false} ;
       sum_pause = if hasmoved[i] {sum_pause} else {sum_pause +1}; 
    }
    field avg_temp = sum_temp/total;
    field avg_speed_moving = sum_speed_moving/(300-sum_pause);
    field avg_hum = sum_hum/300;
    field avg_pause = sum_pause/300;
    field mut sum_of_squares = 0;
    for u31 i in 0..300 {
       sum_of_squares = if hasmoved[i] {sum_of_squares + (speed[i]-avg_speed_moving)*(speed[i]-avg_speed_moving)} else {sum_of_squares};
    }
    field var_speed_moving = sum_of_squares/(n-sum_pause);

    score = if avg_temp > 5 && avg_temp < 30 {score +1} else {score} ;
    score = if avg_hum > 40 && avg_hum < 70 {score +1} else {score};
    score = if avg_hum < 15 {score +1} else {score};
    score = if avg_pause > (1/6) {score +1} else {score};
    score = if  is_safe  {score +1} else {score};
    score = if  is_acc  {score +1} else {score};
    



    log("score is {}", score);
    return score;
}

