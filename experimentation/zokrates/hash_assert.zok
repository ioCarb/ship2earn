/*
Import necessary utility and cryptographic modules for casting, packing, and hashing
*/
import "utils/casts/u32_to_field" as u32_to_field;
import "utils/pack/u32/unpack128" as unpack128;
import "hashes/sha256/512bitPacked" as sha256packed;
import "utils/casts/bool_128_to_u32_4" as bool_128_to_u32_4;
import "hashes/sha256/512bitPadded" as sha256padded;
import "hashes/sha256/sha256" as sha256;


/* 
Function to split a 32-bit number into its tens and unit digits
*/
def split_digits(u32 number)-> u32[2] {
    return [number/10,number%10];
}
/* 
Function to split a 32-bit number into its tens and unit digits
 */
def utf_encode(u32[2] number)->u32[2]{
    u32[2] mut result = [0,0];
    for u32 i in 0..2{
        result[i] = number[i]+30;  // UTF-encode the digit
    }
    return result;
}
/*
Function to concatenate a field and a 32-bit number, treating the 32-bit number as two digits
*/
def concat( field a,u32 b)->field{
    
    field b_field = u32_to_field(b); // Convert the 32-bit number to a field element

    return a*100+b_field; // Concatenate by shifting and adding
}
/*
 Function to convert an array of numbers into a single field element, encoded as UTF-8
 */
def getbytes(u32[10] numbers)->field{
    u32 n = 10; // Define the length of the numbers array
    u32[2] mut digits = [0,0]; // Initialize an array to hold the split digits
    field mut result = 0; // Initialize the result field element
    for u32 i in 0..n{
       digits = split_digits(numbers[i]); // Split the number into tens and units digits
       digits = utf_encode(digits); // Encode the digits in UTF-8
       result = concat(result,digits[0]); // Concatenate the first digit
       result = concat(result,digits[1]); // Concatenate the second digit
       result = if(i<n-1) {concat(result,20)} else {result}; // Add a separator (space) between numbers
    }
    return result; // Return the final concatenated field element
}
/*
Main function to execute the logic
*/
def main(u32[10] input ) -> bool {
    field bytes = getbytes(input); // Convert the input array to a UTF-8 encoded field element
    log("bytes {}",bytes); // Log the encoded bytes
    // Example of generating a SHA-256 packed hash for a fixed input and logging the result
    field[2] hash = sha256packed([0,0,0,5]);
    log("unpacked input {}",[unpack128(0),unpack128(0),unpack128(0),unpack128(5)]); // Log the unpacked input
    log("packedhash {}",[unpack128(hash[0]),unpack128(hash[1])]); // Log the unpacked hash
    // Generate and log a padded SHA-256 hash
    log("padded hash {}",sha256padded([...unpack128(0),...unpack128(0)],[...unpack128(0),...unpack128(5)]));
    // Generate and log the SHA-256 hash of the unpacked input
    log("sha256 hash {}",sha256([[...unpack128(0),...unpack128(0),...unpack128(0),...unpack128(5)]]));
return true;
}

