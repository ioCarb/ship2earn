require('dotenv').config();

async function extractProofAndInput(data) {
  const proof = {
    a: [data[0][0][0], data[0][0][1]],
    b: [
        [data[0][1][0][0], data[0][1][0][1]],
        [data[0][1][1][0], data[0][1][1][1]]
    ],
    c: [data[0][2][0], data[0][2][1]]
};

const input = data[1];  // Assuming input elements need to be converted to BigInt

return { proof, input };


}


async function reportData(VerifierContractAddress, signers) {
    const data = [[["0x11bc91cb126e4a2aad8c751af5f40f6b7de66dacde8954326c9bab354621c664","0x262eba2cc932c294a66e2f7865a89f628d1299c2b4cea55b38bf56ca7bef71f1"],[["0x123e68b582cc741aada247f200a5eb84d9a35001093812b63ca59cd8e471fba1","0x182a37be0996353c3dc767ba04bef95de65e7ef29b634d259ed44936177c6aad"],["0x027b4aa4366190e5b839d430549d077929cb6d871b9889d901c15a1d10f9c772","0x10a207341e7e07561e312de6c5d0cfabf808336ef3018e0942344566653da4c1"]],["0x088b0081d14dcb47ea499f5d6a0c86ab548b118aa7ed75609fafb9bd321396f7","0x25262c430341f864ba088fe467aaf7a0c35764702717aaecca1a7907762d21b6"]],["0x20efac506a3d21dc3882103a7a727ad821f2422988783ee8b2f1762ecd0dbb03","0x24da398ed1996eae6dafb3a687806e3a49c3add6949774d6017b30a66b2503ce","0x000000000000000000000000000000000000000000000000000000001f90b574","0x000000000000000000000000000000000000000000000000000000001f90b574","0x000000000000000000000000000000000000000000000000000000001f90b574","0x000000000000000000000000000000000000000000000000000000001f90b574","0x000000000000000000000000000000000000000000000000000000000eba150f","0x000000000000000000000000000000000000000000000000000000000eba150f","0x000000000000000000000000000000000000000000000000000000000eba150f","0x000000000000000000000000000000000000000000000000000000000eba150f","0x0000000000000000000000000000000000000000000000000000000033cdbb15","0x0000000000000000000000000000000000000000000000000000000033cdbb15","0x0000000000000000000000000000000000000000000000000000000033cdbb15","0x0000000000000000000000000000000000000000000000000000000033cdbb15","0x0000000000000000000000000000000000000000000000000000000080b23fa0","0x0000000000000000000000000000000000000000000000000000000080b23fa0","0x0000000000000000000000000000000000000000000000000000000080b23fa0","0x000000000000000000000000000000000000000000000000000000003b9aca01","0x0000000000000000000000000000000000000000000000000000000086353032","0x0000000000000000000000000000000000000000000000000000000086353032"]];
    //const { proof, input } = await extractProofAndInput(data);
    proof = [["0x11bc91cb126e4a2aad8c751af5f40f6b7de66dacde8954326c9bab354621c664","0x262eba2cc932c294a66e2f7865a89f628d1299c2b4cea55b38bf56ca7bef71f1"],[["0x123e68b582cc741aada247f200a5eb84d9a35001093812b63ca59cd8e471fba1","0x182a37be0996353c3dc767ba04bef95de65e7ef29b634d259ed44936177c6aad"],["0x027b4aa4366190e5b839d430549d077929cb6d871b9889d901c15a1d10f9c772","0x10a207341e7e07561e312de6c5d0cfabf808336ef3018e0942344566653da4c1"]],["0x088b0081d14dcb47ea499f5d6a0c86ab548b118aa7ed75609fafb9bd321396f7","0x25262c430341f864ba088fe467aaf7a0c35764702717aaecca1a7907762d21b6"]];
    input = ["0x20efac506a3d21dc3882103a7a727ad821f2422988783ee8b2f1762ecd0dbb03","0x24da398ed1996eae6dafb3a687806e3a49c3add6949774d6017b30a66b2503ce","0x000000000000000000000000000000000000000000000000000000001f90b574","0x000000000000000000000000000000000000000000000000000000001f90b574","0x000000000000000000000000000000000000000000000000000000001f90b574","0x000000000000000000000000000000000000000000000000000000001f90b574","0x000000000000000000000000000000000000000000000000000000000eba150f","0x000000000000000000000000000000000000000000000000000000000eba150f","0x000000000000000000000000000000000000000000000000000000000eba150f","0x000000000000000000000000000000000000000000000000000000000eba150f","0x0000000000000000000000000000000000000000000000000000000033cdbb15","0x0000000000000000000000000000000000000000000000000000000033cdbb15","0x0000000000000000000000000000000000000000000000000000000033cdbb15","0x0000000000000000000000000000000000000000000000000000000033cdbb15","0x0000000000000000000000000000000000000000000000000000000080b23fa0","0x0000000000000000000000000000000000000000000000000000000080b23fa0","0x0000000000000000000000000000000000000000000000000000000080b23fa0","0x000000000000000000000000000000000000000000000000000000003b9aca01","0x0000000000000000000000000000000000000000000000000000000086353032","0x0000000000000000000000000000000000000000000000000000000086353032"];
    const Contract_listener = await ethers.getContractAt("RankingContract", process.env.RANKING_CONTRACT_ADDRESS, signers[0]);
    Contract_listener.on("companyDataReceived", (address, lastCompany, CO2, distance) => {
      console.log(`Company ${address} emitted ${CO2} on ${distance}km. Last company? ${lastCompany}.`);
    });
    const VerifierListener = await ethers.getContractAt("Verifier", VerifierContractAddress, signers[0]);
    VerifierListener.on("Verified", (input, proof, success) => {
      console.log(`Transaction successfull: ${success}. \n Inputvalues: ${input} \n Proof: ${proof}`);
    });
    console.log(proof);
    console.log(input);
    const Contract = await ethers.getContractAt("Verifier", VerifierContractAddress, signers[1]);
    const tx = await Contract.verifyTx(proof, input, {gasLimit: 3000000});
    await tx.wait();
}

async function main() {
    const VerifierContractAddress = process.env.VERIFIER_CONTRACT_ADDRESS;
    const signers = await ethers.getSigners();
    await reportData(VerifierContractAddress, signers);
    }
    
// Run the script
main()
    .then(() => process.exit(0))
  .catch(error => {
    console.error(error);
    process.exit(1);
  });